use winit::keyboard::{Key, NamedKey};

use crate::*;

pub fn mouse_wheel() -> (f32, f32) {
    GLOBAL_STATE.borrow().mouse_wheel
}

pub fn is_mouse_button_down(button: MouseButton) -> bool {
    GLOBAL_STATE.borrow().mouse_pressed.contains(&button)
}

pub fn is_mouse_button_pressed(button: MouseButton) -> bool {
    GLOBAL_STATE.borrow().mouse_just_pressed.contains(&button)
}

pub fn is_mouse_button_released(button: MouseButton) -> bool {
    GLOBAL_STATE.borrow().mouse_just_released.contains(&button)
}

pub fn set_cursor_hidden(hidden: bool) {
    GLOBAL_STATE.borrow_mut().cursor_hidden = hidden;
}

pub fn set_mouse_locked(locked: bool) {
    GLOBAL_STATE.borrow_mut().mouse_locked = locked;
}

pub fn is_key_pressed(keycode: KeyCode) -> bool {
    GLOBAL_STATE.borrow().just_pressed.contains(&keycode)
}

pub fn is_key_released(keycode: KeyCode) -> bool {
    GLOBAL_STATE.borrow().just_released.contains(&keycode)
}

pub fn is_key_down(keycode: KeyCode) -> bool {
    GLOBAL_STATE.borrow().pressed.contains(&keycode)
}

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
pub enum MouseButton {
    Left,
    Right,
    Middle,
    Other(u16),
}

#[allow(dead_code)]
#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]
pub enum KeyCode {
    Backspace,
    Tab,
    Return,
    Escape,
    Space,
    Exclaim,
    Quotedbl,
    Hash,
    Dollar,
    Percent,
    Ampersand,
    Quote,
    LeftParen,
    RightParen,
    Asterisk,
    Plus,
    Comma,
    Minus,
    Period,
    Slash,
    Num0,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Colon,
    Semicolon,
    Less,
    Equals,
    Greater,
    Question,
    At,
    LeftBracket,
    Backslash,
    RightBracket,
    Caret,
    Underscore,
    Backquote,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    Delete,
    CapsLock,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    PrintScreen,
    ScrollLock,
    Pause,
    Insert,
    Home,
    PageUp,
    End,
    PageDown,
    Right,
    Left,
    Down,
    Up,
    NumLockClear,
    KpDivide,
    KpMultiply,
    KpMinus,
    KpPlus,
    KpEnter,
    Kp1,
    Kp2,
    Kp3,
    Kp4,
    Kp5,
    Kp6,
    Kp7,
    Kp8,
    Kp9,
    Kp0,
    KpPeriod,
    Application,
    Power,
    KpEquals,
    F13,
    F14,
    F15,
    F16,
    F17,
    F18,
    F19,
    F20,
    F21,
    F22,
    F23,
    F24,
    Execute,
    Help,
    Menu,
    Select,
    Stop,
    Again,
    Undo,
    Cut,
    Copy,
    Paste,
    Find,
    Mute,
    VolumeUp,
    VolumeDown,
    KpComma,
    KpEqualsAS400,
    AltErase,
    Sysreq,
    Cancel,
    Clear,
    Prior,
    Return2,
    Separator,
    Out,
    Oper,
    ClearAgain,
    CrSel,
    ExSel,
    Kp00,
    Kp000,
    ThousandsSeparator,
    DecimalSeparator,
    CurrencyUnit,
    CurrencySubUnit,
    KpLeftParen,
    KpRightParen,
    KpLeftBrace,
    KpRightBrace,
    KpTab,
    KpBackspace,
    KpA,
    KpB,
    KpC,
    KpD,
    KpE,
    KpF,
    KpXor,
    KpPower,
    KpPercent,
    KpLess,
    KpGreater,
    KpAmpersand,
    KpDblAmpersand,
    KpVerticalBar,
    KpDblVerticalBar,
    KpColon,
    KpHash,
    KpSpace,
    KpAt,
    KpExclam,
    KpMemStore,
    KpMemRecall,
    KpMemClear,
    KpMemAdd,
    KpMemSubtract,
    KpMemMultiply,
    KpMemDivide,
    KpPlusMinus,
    KpClear,
    KpClearEntry,
    KpBinary,
    KpOctal,
    KpDecimal,
    KpHexadecimal,
    LCtrl,
    LShift,
    LAlt,
    LGui,
    RCtrl,
    RShift,
    RAlt,
    RGui,
    Mode,
    AudioNext,
    AudioPrev,
    AudioStop,
    AudioPlay,
    AudioMute,
    MediaSelect,
    Www,
    Mail,
    Calculator,
    Computer,
    AcSearch,
    AcHome,
    AcBack,
    AcForward,
    AcStop,
    AcRefresh,
    AcBookmarks,
    BrightnessDown,
    BrightnessUp,
    DisplaySwitch,
    KbdIllumToggle,
    KbdIllumDown,
    KbdIllumUp,
    Eject,
    Sleep,
}

#[rustfmt::skip]
impl KeyCode {
    pub fn try_from_winit(code: Key) -> Option<KeyCode> {
        match code {
            Key::Character(c) => {
                match c.as_str() {
                    "A" => Some(KeyCode::A),
                    "B" => Some(KeyCode::B),
                    "C" => Some(KeyCode::C),
                    "D" => Some(KeyCode::D),
                    "E" => Some(KeyCode::E),
                    "F" => Some(KeyCode::F),
                    "G" => Some(KeyCode::G),
                    "H" => Some(KeyCode::H),
                    "I" => Some(KeyCode::I),
                    "J" => Some(KeyCode::J),
                    "K" => Some(KeyCode::K),
                    "L" => Some(KeyCode::L),
                    "M" => Some(KeyCode::M),
                    "N" => Some(KeyCode::N),
                    "O" => Some(KeyCode::O),
                    "P" => Some(KeyCode::P),
                    "Q" => Some(KeyCode::Q),
                    "R" => Some(KeyCode::R),
                    "S" => Some(KeyCode::S),
                    "T" => Some(KeyCode::T),
                    "U" => Some(KeyCode::U),
                    "V" => Some(KeyCode::V),
                    "W" => Some(KeyCode::W),
                    "X" => Some(KeyCode::X),
                    "Y" => Some(KeyCode::Y),
                    "Z" => Some(KeyCode::Z),
                    "0" => Some(KeyCode::Num0),
                    "1" => Some(KeyCode::Num1),
                    "2" => Some(KeyCode::Num2),
                    "3" => Some(KeyCode::Num3),
                    "4" => Some(KeyCode::Num4),
                    "5" => Some(KeyCode::Num5),
                    "6" => Some(KeyCode::Num6),
                    "7" => Some(KeyCode::Num7),
                    "8" => Some(KeyCode::Num8),
                    "9" => Some(KeyCode::Num9),
                    ":" => Some(KeyCode::Colon),
                    ";" => Some(KeyCode::Semicolon),
                    "<" => Some(KeyCode::Less),
                    "=" => Some(KeyCode::Equals),
                    ">" => Some(KeyCode::Greater),
                    "?" => Some(KeyCode::Question),
                    "@" => Some(KeyCode::At),
                    "[" => Some(KeyCode::LeftBracket),
                    "\\" => Some(KeyCode::Backslash),
                    "]" => Some(KeyCode::RightBracket),
                    "^" => Some(KeyCode::Caret),
                    "_" => Some(KeyCode::Underscore),
                    "`" => Some(KeyCode::Backquote),
                    "!" => Some(KeyCode::Exclaim),
                    "\"" => Some(KeyCode::Quotedbl),
                    "#" => Some(KeyCode::Hash),
                    "$" => Some(KeyCode::Dollar),
                    "%" => Some(KeyCode::Percent),
                    "&" => Some(KeyCode::Ampersand),
                    "'" => Some(KeyCode::Quote),
                    "(" => Some(KeyCode::LeftParen),
                    ")" => Some(KeyCode::RightParen),
                    "*" => Some(KeyCode::Asterisk),
                    "+" => Some(KeyCode::Plus),
                    "," => Some(KeyCode::Comma),
                    "-" => Some(KeyCode::Minus),
                    "." => Some(KeyCode::Period),
                    "/" => Some(KeyCode::Slash),

                    _ => None,
                }
            }

            Key::Named(NamedKey::Tab) => Some(KeyCode::Tab),
            Key::Named(NamedKey::Enter) => Some(KeyCode::Return),
            Key::Named(NamedKey::Escape) => Some(KeyCode::Escape),
            Key::Named(NamedKey::Space) => Some(KeyCode::Space),
            Key::Named(NamedKey::Delete) => Some(KeyCode::Delete),
            Key::Named(NamedKey::F1) => Some(KeyCode::F1),
            Key::Named(NamedKey::F2) => Some(KeyCode::F2),
            Key::Named(NamedKey::F3) => Some(KeyCode::F3),
            Key::Named(NamedKey::F4) => Some(KeyCode::F4),
            Key::Named(NamedKey::F5) => Some(KeyCode::F5),
            Key::Named(NamedKey::F6) => Some(KeyCode::F6),
            Key::Named(NamedKey::F7) => Some(KeyCode::F7),
            Key::Named(NamedKey::F8) => Some(KeyCode::F8),
            Key::Named(NamedKey::F9) => Some(KeyCode::F9),
            Key::Named(NamedKey::F10) => Some(KeyCode::F10),
            Key::Named(NamedKey::F11) => Some(KeyCode::F11),
            Key::Named(NamedKey::F12) => Some(KeyCode::F12),
            Key::Named(NamedKey::Pause) => Some(KeyCode::Pause),
            Key::Named(NamedKey::Insert) => Some(KeyCode::Insert),
            Key::Named(NamedKey::Home) => Some(KeyCode::Home),
            Key::Named(NamedKey::PageUp) => Some(KeyCode::PageUp),
            Key::Named(NamedKey::End) => Some(KeyCode::End),
            Key::Named(NamedKey::PageDown) => Some(KeyCode::PageDown),
            Key::Named(NamedKey::ArrowRight) => Some(KeyCode::Right),
            Key::Named(NamedKey::ArrowLeft) => Some(KeyCode::Left),
            Key::Named(NamedKey::ArrowDown) => Some(KeyCode::Down),
            Key::Named(NamedKey::ArrowUp) => Some(KeyCode::Up),
            Key::Named(NamedKey::Power) => Some(KeyCode::Power),
            Key::Named(NamedKey::F13) => Some(KeyCode::F13),
            Key::Named(NamedKey::F14) => Some(KeyCode::F14),
            Key::Named(NamedKey::F15) => Some(KeyCode::F15),
            Key::Named(NamedKey::F16) => Some(KeyCode::F16),
            Key::Named(NamedKey::F17) => Some(KeyCode::F17),
            Key::Named(NamedKey::F18) => Some(KeyCode::F18),
            Key::Named(NamedKey::F19) => Some(KeyCode::F19),
            Key::Named(NamedKey::F20) => Some(KeyCode::F20),
            Key::Named(NamedKey::F21) => Some(KeyCode::F21),
            Key::Named(NamedKey::F22) => Some(KeyCode::F22),
            Key::Named(NamedKey::F23) => Some(KeyCode::F23),
            Key::Named(NamedKey::F24) => Some(KeyCode::F24),
            Key::Named(NamedKey::Cut) => Some(KeyCode::Cut),
            Key::Named(NamedKey::Copy) => Some(KeyCode::Copy),
            Key::Named(NamedKey::Paste) => Some(KeyCode::Paste),
            Key::Named(NamedKey::AudioVolumeMute) => Some(KeyCode::Mute),
            Key::Named(NamedKey::AudioVolumeUp) => Some(KeyCode::VolumeUp),
            Key::Named(NamedKey::AudioVolumeDown) => Some(KeyCode::VolumeDown),
            Key::Named(NamedKey::Control) => Some(KeyCode::LCtrl),
            Key::Named(NamedKey::Shift) => Some(KeyCode::LShift),
            Key::Named(NamedKey::Alt) => Some(KeyCode::LAlt),
            // Somehow this isn't possilbe anymore?
            // Key::Named(NamedKey::LWin) => Some(KeyCode::LGui),
            // Key::Named(NamedKey::RControl) => Some(KeyCode::RCtrl),
            // Key::Named(NamedKey::RShift) => Some(KeyCode::RShift),
            // Key::Named(NamedKey::RAlt) => Some(KeyCode::RAlt),
            // Key::Named(NamedKey::RWin) => Some(KeyCode::RGui),
            _ => None,
        }
    }
}
